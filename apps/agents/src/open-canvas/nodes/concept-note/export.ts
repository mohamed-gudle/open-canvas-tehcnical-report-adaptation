import { LangGraphRunnableConfig } from "@langchain/langgraph";
import {
  ConceptNoteGraphState,
  ConceptNoteGraphReturnType,
} from "../../concept-note-state.js";
import { AIMessage } from "@langchain/core/messages";
import { v4 as uuidv4 } from "uuid";

/**
 * Export Node - Finalizes the concept note and prepares it for delivery.
 * Handles final formatting and creates the export artifact.
 */
export async function exportNode(
  state: ConceptNoteGraphState,
  config: LangGraphRunnableConfig
): Promise<ConceptNoteGraphReturnType> {
  console.log("ðŸ“¤ Starting Export phase for concept note");

  const {
    conceptDraft,
    userInputs,
    derivedData,
    researchNotes,
    assumptionsLog,
    todos,
    citations,
  } = state;
  void config;

  if (!conceptDraft) {
    return {
      needsUserIntervention: true,
      interventionContext: {
        stage: "export",
        reason: "no_draft_available",
        prompt:
          "No draft is available for export. Please complete the drafting process first.",
      },
    };
  }

  try {
    // Get export preferences
    const outputFormat = userInputs?.outputPreferences?.format || "markdown";
    const includeVisuals =
      userInputs?.outputPreferences?.includeVisuals || false;
    const length = userInputs?.outputPreferences?.length || "standard";

    // Generate the final export content
    const exportContent = await generateExportContent(
      conceptDraft,
      userInputs,
      derivedData,
      researchNotes,
      assumptionsLog,
      todos,
      citations,
      outputFormat,
      length
    );

    // Create the final artifact
    const finalArtifact = {
      currentIndex: 1,
      contents: [
        {
          index: 1,
          type: "text" as const,
          title: userInputs?.title
            ? `Final Concept Note: ${userInputs.title}`
            : "Final Concept Note",
          fullMarkdown: exportContent,
        },
      ],
    };

    // Generate export completion message with summary
    const exportMessage = new AIMessage({
      id: `export-${uuidv4()}`,
      content: generateExportMessage(
        conceptDraft,
        userInputs,
        outputFormat,
        includeVisuals
      ),
    });

    return {
      artifact: finalArtifact,
      messages: [exportMessage],
      _messages: [exportMessage],
      conceptNoteStage: "completed",
      needsUserIntervention: false,
    };
  } catch (error) {
    console.error("Export error:", error);

    return {
      needsUserIntervention: true,
      interventionContext: {
        stage: "export",
        reason: "export_failed",
        prompt:
          "There was an issue during the export process. Please check the draft and try again.",
      },
    };
  }
}

/**
 * Generate the complete export content in the specified format
 */
async function generateExportContent(
  draft: any,
  userInputs?: any,
  derivedData?: any,
  researchNotes?: any,
  assumptionsLog?: any,
  todos?: any,
  citations?: any,
  format = "markdown",
  length = "standard"
): Promise<string> {
  const title = userInputs?.title || "Concept Note";
  const date = new Date().toLocaleDateString();
  const author = "Open Canvas Concept Note Builder";
  const normalizedFormat = format.toLowerCase();

  let content = "";

  // Header section
  content += generateHeader(title, date, author, draft.version);

  // Table of contents (for standard and detailed versions)
  if (length !== "brief") {
    content += generateTableOfContents();
  }

  // Main content sections
  content += generateMainContent(draft, length);

  // Appendices for detailed version
  if (length === "detailed") {
    content += generateAppendices(
      derivedData,
      researchNotes,
      assumptionsLog,
      todos,
      citations
    );
  }

  // Footer
  content += generateFooter(date, draft.version);

  if (normalizedFormat !== "markdown") {
    content += `\n> Export requested in ${format} format. Markdown output provided until native ${format} export is available.`;
  }

  return content;
}

/**
 * Generate document header
 */
function generateHeader(
  title: string,
  date: string,
  author: string,
  version: number
): string {
  return (
    `# ${title}\n\n` +
    `**Document Version**: ${version}\n` +
    `**Date**: ${date}\n` +
    `**Generated by**: ${author}\n\n` +
    `---\n\n`
  );
}

/**
 * Generate table of contents
 */
function generateTableOfContents(): string {
  return (
    `## Table of Contents\n\n` +
    `1. [Executive Summary](#executive-summary)\n` +
    `2. [Problem Statement](#problem-statement)\n` +
    `3. [Proposed Solution](#proposed-solution)\n` +
    `4. [Implementation Plan](#implementation-plan)\n` +
    `5. [Timeline](#timeline)\n` +
    `6. [Budget](#budget)\n` +
    `7. [Risk Management](#risk-management)\n` +
    `8. [Expected Outcomes](#expected-outcomes)\n` +
    `9. [Appendices](#appendices)\n\n` +
    `---\n\n`
  );
}

/**
 * Generate main content sections
 */
function generateMainContent(draft: any, length: string): string {
  let content = "";

  // Executive Summary
  if (draft.executiveSummary) {
    content += `## Executive Summary\n\n${draft.executiveSummary}\n\n`;
  }

  // Problem Statement
  if (draft.problemStatement) {
    content += `## Problem Statement\n\n${draft.problemStatement}\n\n`;
  }

  // Proposed Solution
  if (draft.proposedSolution) {
    content += `## Proposed Solution\n\n${draft.proposedSolution}\n\n`;
  }

  // Implementation Plan
  if (draft.implementation) {
    content += `## Implementation Plan\n\n${draft.implementation}\n\n`;
  }

  // Skip timeline and budget for brief version
  if (length !== "brief") {
    if (draft.timeline) {
      content += `## Timeline\n\n${draft.timeline}\n\n`;
    }

    if (draft.budget) {
      content += `## Budget\n\n${draft.budget}\n\n`;
    }
  }

  // Risk Management
  if (draft.riskManagement) {
    content += `## Risk Management\n\n${draft.riskManagement}\n\n`;
  }

  // Expected Outcomes
  if (draft.expectedOutcomes) {
    content += `## Expected Outcomes\n\n${draft.expectedOutcomes}\n\n`;
  }

  return content;
}

/**
 * Generate appendices for detailed version
 */
function generateAppendices(
  derivedData?: any,
  researchNotes?: any,
  assumptionsLog?: any,
  todos?: any,
  citations?: any
): string {
  let appendices = `---\n\n## Appendices\n\n`;

  // Appendix A: Stakeholder Analysis
  if (derivedData?.stakeholders?.length > 0) {
    appendices += `### Appendix A: Stakeholder Analysis\n\n`;
    derivedData.stakeholders.forEach((stakeholder: string, index: number) => {
      appendices += `${index + 1}. ${stakeholder}\n`;
    });
    appendices += `\n`;
  }

  // Appendix B: Risk Register
  if (derivedData?.risks?.length > 0) {
    appendices += `### Appendix B: Detailed Risk Register\n\n`;
    appendices += `| Risk | Impact | Likelihood | Mitigation |\n`;
    appendices += `|------|--------|------------|------------|\n`;
    derivedData.risks.forEach((risk: any) => {
      appendices += `| ${risk.risk} | ${risk.impact} | ${risk.likelihood} | ${risk.mitigation || "TBD"} |\n`;
    });
    appendices += `\n`;
  }

  // Appendix C: Assumptions Log
  if (assumptionsLog?.assumptions?.length > 0) {
    appendices += `### Appendix C: Assumptions Made\n\n`;
    assumptionsLog.assumptions.forEach((assumption: any, index: number) => {
      appendices += `${index + 1}. **${assumption.assumption}**\n`;
      appendices += `   - Reasoning: ${assumption.reasoning}\n`;
      appendices += `   - Confidence: ${assumption.confidence}\n`;
      appendices += `   - Stage: ${assumption.stage}\n\n`;
    });
  }

  // Appendix D: Research Sources
  if (
    researchNotes?.webFindings?.length > 0 ||
    citations?.sources?.length > 0
  ) {
    appendices += `### Appendix D: Research Sources\n\n`;

    if (researchNotes?.webFindings?.length > 0) {
      appendices += `**Web Research:**\n`;
      researchNotes.webFindings.forEach((finding: any, index: number) => {
        appendices += `${index + 1}. ${finding.source}${finding.url ? ` - ${finding.url}` : ""}\n`;
        appendices += `   - Reliability: ${finding.reliability}\n`;
        appendices += `   - Content: ${finding.relevantContent.substring(0, 100)}...\n\n`;
      });
    }

    if (citations?.sources?.length > 0) {
      appendices += `**Citations:**\n`;
      citations.sources.forEach((citation: any, index: number) => {
        appendices += `${index + 1}. ${citation.title}`;
        if (citation.author) appendices += ` by ${citation.author}`;
        if (citation.date) appendices += ` (${citation.date})`;
        if (citation.url) appendices += ` - Available at: ${citation.url}`;
        appendices += `\n`;
      });
    }
  }

  // Appendix E: Action Items
  if (todos?.items?.length > 0) {
    appendices += `### Appendix E: Outstanding Action Items\n\n`;
    const pendingTodos = todos.items.filter(
      (todo: any) => todo.status === "pending"
    );

    if (pendingTodos.length > 0) {
      appendices += `| Priority | Task | Stage | Assigned To |\n`;
      appendices += `|----------|------|-------|-------------|\n`;
      pendingTodos.forEach((todo: any) => {
        appendices += `| ${todo.priority} | ${todo.task} | ${todo.stage} | ${todo.assignedTo || "TBD"} |\n`;
      });
    }
  }

  return appendices;
}

/**
 * Generate document footer
 */
function generateFooter(date: string, version: number): string {
  return (
    `\n---\n\n` +
    `**Document Information:**\n` +
    `- Generated: ${date}\n` +
    `- Version: ${version}\n` +
    `- Tool: Open Canvas Guided Concept Note Builder\n` +
    `- Format: Markdown\n\n` +
    `*This document was automatically generated using AI-assisted analysis and should be reviewed by subject matter experts before finalization.*\n`
  );
}

/**
 * Generate export completion message
 */
function generateExportMessage(
  draft: any,
  userInputs?: any,
  format= "markdown",
  includeVisuals = false
): string {
  const title = userInputs?.title || "your concept note";
  const sectionsCount = Object.keys(draft).filter(
    (key) =>
      draft[key] && typeof draft[key] === "string" && draft[key].length > 0
  ).length;

  let message = `ðŸ“¤ **Export Complete!**\n\n`;
  message += `âœ… Successfully exported "${title}" in ${format.toUpperCase()} format\n\n`;
  message += `**Document Summary:**\n`;
  message += `â€¢ **Sections**: ${sectionsCount} completed sections\n`;
  message += `â€¢ **Version**: ${draft.version}\n`;
  message += `â€¢ **Format**: ${format}\n`;
  message += `â€¢ **Length**: ${userInputs?.outputPreferences?.length || "standard"}\n`;

  if (includeVisuals) {
    message += `â€¢ **Visuals**: Included\n`;
  }

  message += `\nðŸŽ‰ **Your concept note is ready!** `;
  message += `The document includes all essential sections with professional formatting. `;
  message += `You can now download, share, or further customize the content as needed.\n\n`;
  message += `ðŸ’¡ **Next Steps:**\n`;
  message += `â€¢ Review the final document for any last-minute adjustments\n`;
  message += `â€¢ Share with stakeholders for feedback\n`;
  message += `â€¢ Use as a foundation for detailed project planning\n`;

  return message;
}
